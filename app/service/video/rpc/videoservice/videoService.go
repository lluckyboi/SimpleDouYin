// Code generated by goctl. DO NOT EDIT.
// Source: video.proto

package videoservice

import (
	"context"

	"SimpleDouYin/app/service/video/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Author          = pb.Author
	FeedReq         = pb.FeedReq
	FeedResp        = pb.FeedResp
	PublishListReq  = pb.PublishListReq
	PublishListResp = pb.PublishListResp
	PublishReq      = pb.PublishReq
	PublishResp     = pb.PublishResp
	Video           = pb.Video

	VideoService interface {
		Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error)
		Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error)
		PublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error)
	}

	defaultVideoService struct {
		cli zrpc.Client
	}
)

func NewVideoService(cli zrpc.Client) VideoService {
	return &defaultVideoService{
		cli: cli,
	}
}

func (m *defaultVideoService) Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error) {
	client := pb.NewVideoServiceClient(m.cli.Conn())
	return client.Feed(ctx, in, opts...)
}

func (m *defaultVideoService) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error) {
	client := pb.NewVideoServiceClient(m.cli.Conn())
	return client.Publish(ctx, in, opts...)
}

func (m *defaultVideoService) PublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error) {
	client := pb.NewVideoServiceClient(m.cli.Conn())
	return client.PublishList(ctx, in, opts...)
}
