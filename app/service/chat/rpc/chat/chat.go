// Code generated by goctl. DO NOT EDIT.
// Source: chat.proto

package chat

import (
	"context"

	"SimpleDouYin/app/service/chat/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Msg           = pb.Msg
	MsgRecordReq  = pb.MsgRecordReq
	MsgRecordResp = pb.MsgRecordResp
	SendMsgReq    = pb.SendMsgReq
	SendMsgResp   = pb.SendMsgResp

	Chat interface {
		SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error)
		MsgRecord(ctx context.Context, in *MsgRecordReq, opts ...grpc.CallOption) (*MsgRecordResp, error)
	}

	defaultChat struct {
		cli zrpc.Client
	}
)

func NewChat(cli zrpc.Client) Chat {
	return &defaultChat{
		cli: cli,
	}
}

func (m *defaultChat) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error) {
	client := pb.NewChatClient(m.cli.Conn())
	return client.SendMsg(ctx, in, opts...)
}

func (m *defaultChat) MsgRecord(ctx context.Context, in *MsgRecordReq, opts ...grpc.CallOption) (*MsgRecordResp, error) {
	client := pb.NewChatClient(m.cli.Conn())
	return client.MsgRecord(ctx, in, opts...)
}
