// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		Comment:  newComment(db),
		Favorite: newFavorite(db),
		Follow:   newFollow(db),
		Message:  newMessage(db),
		Publish:  newPublish(db),
		User:     newUser(db),
		Video:    newVideo(db),
	}
}

type Query struct {
	db *gorm.DB

	Comment  comment
	Favorite favorite
	Follow   follow
	Message  message
	Publish  publish
	User     user
	Video    video
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		Comment:  q.Comment.clone(db),
		Favorite: q.Favorite.clone(db),
		Follow:   q.Follow.clone(db),
		Message:  q.Message.clone(db),
		Publish:  q.Publish.clone(db),
		User:     q.User.clone(db),
		Video:    q.Video.clone(db),
	}
}

type queryCtx struct {
	Comment  *commentDo
	Favorite *favoriteDo
	Follow   *followDo
	Message  *messageDo
	Publish  *publishDo
	User     *userDo
	Video    *videoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Comment:  q.Comment.WithContext(ctx),
		Favorite: q.Favorite.WithContext(ctx),
		Follow:   q.Follow.WithContext(ctx),
		Message:  q.Message.WithContext(ctx),
		Publish:  q.Publish.WithContext(ctx),
		User:     q.User.WithContext(ctx),
		Video:    q.Video.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
